max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
robot_radius: 0.3  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
#footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular
#footprint: [[-0.3, -0.3], [-0.3, 0.3], [0.3, 0.3], [0.3, -0.3]]

map_type: voxel

#Voxel grid specific parameters
origin_z:            0.0  #The z origin of the map in meters.
z_resolution:        0.2  #The z resolution of the map in meters/cell.
z_voxels:            10    #The number of voxels to in each vertical column, the height of the grid is z_resolution * z_voxels.
unknown_threshold:   100   #The number of unknown cells allowed in a column considered to be "known"
mark_threshold:      0     #The maximum number of marked cells allowed in a column considered to be "free".

#Set the tolerance we're willing to have for tf transforms
transform_tolerance: 0.2 #tf data의 유용시간, 현재시간으로부터 Value값 이전의 값만 유효.

#Obstacle marking parameters
track_unknown_space:  false    #true needed for disabling global path planning through unknown space
obstacle_range: 5.0
raytrace_range: 5.0

#Input Sensor
obstacle_layer:
 observation_sources: fusion_scan #laser_scan 
 fusion_scan: {sensor_frame: laser, data_type: LaserScan, topic: /urg_node/scan, marking: true, clearing: true}
 #laser_scan: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}   

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  0.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.30  # max. distance from an obstacle at which costs are incurred for planning paths.



#static_layer:
#  enabled:              true
  

